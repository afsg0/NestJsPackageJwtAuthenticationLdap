# server
HTTP_SERVER_PORT='3010'
# auth, if false only shows accessToken in response
AUTH_SHOW_ACCESS_TOKEN_PROPS='true'
# jwt
# Don't enable ACCESS_TOKEN_JWT_SECRET else it disable renewAccessTokens feature
ACCESS_TOKEN_JWT_SECRET='secretKeyAccessToken'
ACCESS_TOKEN_EXPIRES_IN='30m'
# ACCESS_TOKEN_EXPIRES_IN='30s'
# Don't enable REFRESH_TOKEN_JWT_SECRET else it disable renewAccessTokens feature
# REFRESH_TOKEN_JWT_SECRET='secretKeyRefreshToken'
REFRESH_TOKEN_EXPIRES_IN='7d'
REFRESH_TOKEN_SKIP_INCREMENT_VERSION='false'
# OpenApi
OPENAPI_TITLE='Consumer App'
OPENAPI_DESCRIPTION='Koakh NestJS Jwt Authentication Package LDAP Consumer App'
OPENAPI_VERSION='1.0.0'
OPENAPI_TAG='nestjs, typescript, ldap, auth, security'

# ldap
LDAP_ADDRESS='c3edu.online'
# LDAP_ADDRESS='192.168.1.202'
# ldap using tunnel
# LDAP_ADDRESS='192.168.1.2'
# LDAP_PORT='2210'
# LDAP_ADDRESS='192.168.1.120'
LDAP_BASE_DN='dc=c3edu,dc=online'
LDAP_BASE_ADMIN='cn=administrator,cn=users'
# TODO get value from 'bindDn:LDAP_BASE_ADMIN,baseDn:LDAP_BASE_DN'
# LDAP_BIND_DN="${bindDn},${baseDn}"
LDAP_BIND_DN='cn=administrator,cn=users,dc=c3edu,dc=online'
LDAP_ROOT_USER='c3'
# in case of error `LDAPError [InvalidCredentialsError]: Invalid Credentials` get with $(cat /etc/ldap.password)
# '80090308: LdapErr: DSID-0C0903A9, comment: AcceptSecurityContext error, data 52e, v1db1'
LDAP_BIND_CREDENTIALS='nIDh-&RZ$APv_C1k'
# leaves this not here
# KO: gives [ExceptionsHandler] unexpected number of matches (2) for "c3" username. error: {  "statusCode": 500,  "path": "/v1/auth/login",  "errorType": "Error" }
# LDAP_SEARCH_BASE="ou=People,${baseDn}"
LDAP_SEARCH_BASE='ou=People,dc=c3edu,dc=online'
# used in ldap strategy, don't use parseTemplate here, we must inject this in PassportStrategy and it uses plain `(cn={{username}})`
LDAP_SEARCH_USER_FILTER_STRATEGY='(cn={{username}})'
LDAP_SEARCH_USER_FILTER='(cn=${username})'
LDAP_SEARCH_USER_ATTRIBUTES='cn,givenName,sn,displayName,userPrincipalName,memberOf,userAccountControl,objectCategory,distinguishedName,mail,lastLogonTimestamp,gender,c3UserRole,dateOfBirth,studentID,telephoneNumber,extraPermission'
LDAP_SEARCH_GROUP_FILTER='(cn=${groupName})'
LDAP_SEARCH_GROUP_ATTRIBUTES='dn,cn,sAMAccountName,name,memberOf,objectCategory,distinguishedName,permission'
LDAP_SEARCH_GROUP_PROFILES_PREFIX='C3'
LDAP_SEARCH_GROUP_PERMISSIONS_PREFIX='RP'
# ex C3Developer,C3Administrator,...
LDAP_SEARCH_GROUP_EXCLUDE_PROFILE_GROUPS='C3Developer'
# ex RPLicense,RPRemoteServices,RPFirewall,...
LDAP_SEARCH_GROUP_EXCLUDE_PERMISSION_GROUPS=''
LDAP_SEARCH_CACHE_FILTER='(objectCategory=CN=Person,CN=Schema,CN=Configuration,DC=c3edu,DC=online)'
LDAP_NEW_USER_DN_POSTFIX='ou=People'
AUTH_ADMIN_ROLE='C3_ADMINISTRATOR'
AUTH_ADMIN_ROLE_PERMITTED_UNLICENSED_PERMISSION_GROUPS="RP_LICENSE,RP_INTERNET_ACCESS,RP_TIME_CONFIGURATION,RP_WIRELESS,RP_LOCAL_AREA_NETWORK"
# pass external permissions to controllers RP_USERS is optional because ROLE_ADMIN already have RP_USERS, but we use it here to test permissions array
LDAP_CONTROLLER_PERMISSION_GET_USER='RP_USERS,RP_USERS@READ'
LDAP_CONTROLLER_PERMISSION_GET_USERS='RP_USERS,RP_USERS@READ'
