// dev
@host = localhost
@port = 3010
@uri = http://{{host}}:{{port}}/v1

// prod/docker image
// @host = c3edu.online
// @uri = https://{{host}}/backend/v1
// @port = 8420
// @uri = https://{{host}}:{{port}}/v1

@contentType = application/json

# groups
@groupC3Developer = C3Developer
@groupC3Guests = C3Guests
@groupC3Parent = C3Parent
@groupC3Administrator = C3Administrator
@groupC3Teacher = C3Teacher
@groupC3Student = C3Student
@groupC3NewGroup = C3NewGroup

// NOTE: watch out for expired token problems when we use `{{authLogIn`. or `{{authLogInLdap.`, check for dates in error
// NOTE: amother problem seem to use accessToken and both endpoints, to prevent this kind of rest client problems, never use same variables is both cases
// NOTE: check that user is not disabled
// {
//   "name": "TokenExpiredError",
//   "message": "jwt expired",
//   "expiredAt": "2020-10-20T14:31:36.000Z"
// }
// "jwt expired" comes from jsonwebtoken/verify.js

### authLogInLdap
// @name authLogInLdap

POST {{uri}}/auth/login HTTP/1.1
Content-Type: {{contentType}}

{
  // "username": "dev",
  // "password": "qhA1Bpn5s5",
  // "username": "c3",
  // "password": "root"
  // "username": "parent1",
  // "username": "student1",
  // "username": "teacher1",
  // "password": "1234"
  // "username": "nano",
  // "password": "nanosecret"
  // "password": "secret"
  // test change password
  // "username": "developer5",
  // "password": "superhiddenpassword"
  // "password": "secret!"
  "username": "mario",
  "password": "1234",
  // this will ignore license activate status, and always get all permissions even when device is not activated
  // can be used to always get a token without c3 activation
  "forceActivatedLicense": true
}

### authRefreshTokenLdap
// @name authRefreshTokenLdap

POST {{uri}}/auth/refresh-token HTTP/1.1
Content-Type: {{contentType}}

{
}

### authRevokeRefreshToken
// @name authRevokeRefreshToken

POST {{uri}}/auth/revoke-refresh-token HTTP/1.1
Content-Type: {{contentType}}

{
  // note this works with inMemory store, if we used a valid token and restart server user is missing in userStore
  // change user to revoke it'// s token, increment version
  "cn": "c3"
}

### authLogOut
// @name authLogOut
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/auth/logout HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### authInvalidateJwtSecret
// @name authInvalidateJwtSecret
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/auth/invalidate-secrets HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### authGetJwtSecrets
// @name authGetJwtSecrets
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@secretPackage = 4LGHe209gmlJtQwP7FfM89hMNzOCqrNg
@secretC3backend = NUV9AZaKluiGgrhbSP6bSFH7PmKMU4At

GET {{uri}}/auth/secrets/{{secretC3backend}} HTTP/1.1
Content-Type: {{contentType}}

{
}


### authVerifyToken
// @name authVerifyToken

POST {{uri}}/auth/verify-token HTTP/1.1
Content-Type: {{contentType}}

{
  "accessToken": "{{authToken}}"
}


### ldapCreateUserRecord
// @name ldapCreateUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // will be converted to username marioalbertomendesmonteiro
  // "cn": "MarioAlbertoMendesMonteiro",
  "cn": "mario",
  "unicodePwd": "1234",
  "givenName": "Mário",
  "sn": "Monteiro",
  "displayName": "Mário Alberto Mendes Monteiro",
  "objectClass": "User",
  // will fit in ou:{{groupC3Student}}
  "defaultGroup": "{{groupC3Student}}",
  // optional
  "mail":"mario.monteiro@critical-links.com",
  "dateOfBirth": 19711219,
  "gender": "M",
  "telephoneNumber": "+351936202228",
  "studentID": "34273462836a"
}

### ldapCreateUserDevRecord
// @name ldapCreateUserDevRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // "distinguishedName": "dn:CN=mario,CN=Users,DC=c3edu,DC=online",
  "cn": "developer5",
  "unicodePwd": "superhiddenpassword",
  "givenName": "Linus",
  "sn": "Torvalds",
  // "displayName": "Linux Torvalds",
  "objectClass": "User",
  "defaultGroup": "{{groupC3Developer}}",
  // optional
  "mail":"linux.torvalds@critical-links.com",
  "dateOfBirth": 19711219,
  "gender": "M",
  "telephoneNumber": "+351936202228",
  // "studentID": "34273462836a"
  "studentID": "1"
}

### ldapChangeUserRecord
// @name ldapChangeUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@changeUsername = mario

PUT {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

// array of modifications, send one attribute only to prevent error `message:'Only one attribute per Change allowed'`
// you can pass in a single Change or an array of Change objects
{
  "cn": "{{changeUsername}}",
  "defaultGroup" : "{{groupC3Student}}",
  "changes": [
    // {
    //   // replace, add, delete
    //   "operation": "replace",
    //   "modification": {
    //     "displayName": "Nuno Bento Changed 7"
    //   }
    // },
    // opt1: unicodePwd replace password
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "unicodePwd": "nanosecret"
    //   }
    // },
    // opt2: unicodePwd must have delete and add
    // {
    //   "operation": "delete",
    //   "modification": {
    //     "unicodePwd": "secret"
    //   }
    // },
    // {
    //   "operation": "add",
    //   "modification": {
    //     "unicodePwd": "changedsecret"
    //   }
    // },
    // test validation
    // TODO: can't permit change cn, this is a protected field
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "cn": "lex"
    //   }
    // },
    {
      "operation": "replace",
      "modification": {
        "unicodePwd": "2222"
      }
    }
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "givenName": "John"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "sn": "Doe"
    //   }
    // },
    // TODO: can't permit change cn, this is a protected field
    // TODO: this have a diferent endpoint: https://c3edu.online/backend/v1/ldap/default-group
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "defaultGroup": "CN=dev,OU=C3Developer,OU=People,DC=c3edu,DC=online"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "objectClass": "User"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "displayName": "John Doe"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "jpegPhoto": "1.png"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "mail": "mail@mail.pt"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "dateOfBirth": "19721219"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "gender": "m"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "telephoneNumber": "+351936202288"
    //   }
    // },
    // {
    //   "operation": "replace",
    //   "modification": {
    //     "studentID": "282"
    //   }
    // }
    // works
    // {
    //   "operation": "delete",
    //   "modification": {
    //     "mail": null
    //   }
    // }  
  ]
}

### ldapChangeUserRecordAddExtraPermission
// @name ldapChangeUserRecordAddExtraPermission
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@changeUsernameExtraPermission = teacher1

PUT {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "cn": "{{changeUsernameExtraPermission}}",
  "defaultGroup" : "{{groupC3Teacher}}",
  "changes": [
    {
       // replace, add, delete
      "operation": "add",
      "modification": {
        "extraPermission": "RPInternetAccess"
      }
    },
    {
      "operation": "add",
      "modification": {
        "extraPermission": "RPLocalAreaNetwork"
      }
    },
    {
      "operation": "add",
      "modification": {
        "extraPermission": "RPWireless"
      }
    }
  ]
}

### ldapGetUserRecord: don't use cache, goes direct to ldap
// @name ldapGetUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
// @getUsername = dev
@getUsername = mario

GET {{uri}}/ldap/user/{{getUsername}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### lapAddMemberToGroup
// @name ldapAddMemberToGroup
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@addUserToGroup = teacher1

POST {{uri}}/ldap/group/add HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "cn": "{{addUserToGroup}}",
  // required to use in searchDn, get defaultGroup from "dn": "CN=user,OU=${defaultGroup},OU=People,DC=c3edu,DC=online"
  "defaultGroup" : "{{groupC3Teacher}}",
  // add a member to group
  "group" : "{{groupC3Parent}}"
}

### ldapDeleteMemberFromGroup
// @name ldapDeleteMemberFromGroup
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@deleteUserFromGroup = teacher1

POST {{uri}}/ldap/group/delete HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "cn": "{{deleteUserFromGroup}}",
  // required to use in searchDn, get defaultGroup from "dn": "CN=user,OU=${defaultGroup},OU=People,DC=c3edu,DC=online"
  "defaultGroup" : "{{groupC3Developer}}",
  // add a member to group
  "group" : "{{groupC3Teacher}}"
}

### ldapChangeDefaultGroup
// @name ldapChangeDefaultGroup
@authToken = {{authLogInLdap.response.body.$.accessToken}}

PUT {{uri}}/ldap/default-group HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "cn": "moke001",
  "defaultGroup" : "{{groupC3Student}}",
  // add a member to group
  "group" : "{{groupC3Teacher}}"
}

### ldapDeleteUserRecord
// @name ldapDeleteUserRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}
@deleteUsername = mario

DELETE {{uri}}/ldap/user HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "cn": "{{deleteUsername}}",
  // "defaultGroup" : "{{groupC3Developer}}"
  "defaultGroup" : "{{groupC3Student}}"
}

### ldapInitUserRecordsCache
// @name ldapInitUserRecordsCache
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/cache/init HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // optional override LDAP_SEARCH_CACHE_FILTER
  // get it from a user record property "objectCategory": "CN=Person,CN=Schema,CN=Configuration,DC=c3edu,DC=online"
  // "filter": "(objectCategory=CN=Person,CN=Schema,CN=Configuration,DC=c3edu,DC=online)"
}

### ldapGetUserRecords
// @name ldapGetUserRecords
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/cache/search HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "page": 1,
  "perPage": 100,
  "sortBy": "dateOfBirth",
  // "sortDirection": "ascending",
  // "sortDirection": "descending",
  // optional array of users
  // "searchUsersCn": ["dev", "c3", "teacher1", "parent1", "nano", "dontexists", "koakh"]
  // or one user
  // "searchUsersCn": ["teacher1"]
  "searchAttributes": [
    {
      // fields
      // "cn": {
      // "cn||displayName": {
      "cn||displayName||telephoneNumber": {
        // must match string
        // "exact": "koakh",
        // "exact": "Mário Monteiro"
        // "exact": "+351936202288"
        // "exact": "koakh",
        "exact": "parent1",
        // must contain string
        "includes": "Pare",
        // must match regex, warn for escaped slashes
        // TODO: always use case insensistivite, to catch duplicates like Parent1 & parent1, C3 and c3
        "regex": "\\b(\\w*parent\\w*)\\b",
        "regexOptions": "i"
      }
    },
    // {
    //   "dn": {
    //     // "regex": "\\.*,OU=School2,OU=People,DC=c3edu,DC=online$\\b"
    //     // pass case insensitivity
    //     "regex": "\\.*,ou=school2,ou=people,dc=c3edu,dc=online$\\b",
    //     "regexOptions": "i"
    //   }
    // }
    // {
    //   "email": {
    //   "exact": "mario@c3edu.online"
    //   }
    // },
    // {
    //   "displayName": {
    //     "exact":"mario monteiro"
    //   }
    // },
    {
      // special property, must search in memberOf array
      "memberOf": {
        // c3
        // "exact": "CN=C3Administrator,OU=Profiles,OU=Groups,DC=c3edu,DC=online"
        // "exact": "CN=Domain Admins,CN=Users,DC=c3edu,DC=online"
        // student, ex mario
        // "exact": "CN=C3Student,OU=Profiles,OU=Groups,DC=c3edu,DC=online"
        // parent
        "exact": "CN=C3Parent,OU=Profiles,OU=Groups,DC=c3edu,DC=online"
      }
    }
  ]
}

### ldapGetUserProfileRecord: don't use cache, goes direct to ldap
// @name ldapGetUserProfileRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

GET {{uri}}/ldap/profile HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapChangeUserProfileRecord
// @name ldapChangeUserProfileRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

PUT {{uri}}/ldap/profile HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // NOTE: must match logged user defaultGroup
  // "defaultGroup" : "{{groupC3Administrator}}",
  // "defaultGroup" : "{{groupC3Developer}}",
  "defaultGroup" : "{{groupC3Student}}",
  "changes": [
    // replace, add, delete
    // permittedKeys
    { "operation": "replace", "modification": { "givenName": "Mário" } },
    { "operation": "replace", "modification": { "sn": "Monteiro" } },
    { "operation": "replace", "modification": { "displayName": "Mário A.M. Monteiro" } },
    { "operation": "replace", "modification": { "mail": "mario.monteiro@critical-links.com" } },
    { "operation": "replace", "modification": { "telephoneNumber": "936202288" } },
    // { "operation": "replace", "modification": { "givenName": "Helder" } },
    // { "operation": "replace", "modification": { "sn": "Pereira" } },
    // { "operation": "replace", "modification": { "displayName": "Helder Pereira" } },
    // { "operation": "replace", "modification": { "mail": "helder.pereira@critical-links.com" } },
    // { "operation": "replace", "modification": { "telephoneNumber": "939876543" } },
    // test password
    { "operation": "replace", "modification": { "unicodePwd": "1111" } },
    
    // test non permittedKeys
    { "operation": "replace", "modification": { "unknownKey1": "foo" } },
    { "operation": "replace", "modification": { "unknownKey2": "bar" } }
  ]
}

### ldapChangeUserProfilePassword
// @name ldapChangeUserProfilePassword
@authToken = {{authLogInLdap.response.body.$.accessToken}}

PUT {{uri}}/ldap/profile/password HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  // must match logged user defaultGroup
  // "defaultGroup" : "{{groupC3Administrator}}",
  // "defaultGroup" : "{{groupC3Developer}}",
  "defaultGroup" : "{{groupC3Student}}",
  "oldPassword": "1234",
  // newPassword must not be used in history, else
  // 0000052D: Constraint violation - check_password_restrictions: the password was already used (in history)!
  // NOTE: old password, after change will work, in this case old and new will work
  "newPassword": "0000"
}

### ldapCreateGroupRecord
// @name ldapCreateGroupRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

POST {{uri}}/ldap/group HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "groupName": "{{groupC3NewGroup}}"
  // will be converted to C3GrupoNovo
  // "groupName": "grupo-novo"
}

### ldapDeleteGroupRecord
// @name ldapDeleteGroupRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

DELETE {{uri}}/ldap/group HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "groupName": "{{groupC3NewGroup}}"
}

### ldapGetGroupRecord : warn C3Developer and exclude groups are out
// @name ldapGetGroupRecord
@authToken = {{authLogInLdap.response.body.$.accessToken}}

GET {{uri}}/ldap/group/{{groupC3NewGroup}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### ldapGetGroups : warn C3Developer and exclude groups are out
// @name ldapGetGroups
@authToken = {{authLogInLdap.response.body.$.accessToken}}

GET {{uri}}/ldap/group HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### WARN: required to enable AppController, AppService and ConsumerAppService in nestjs-package-jwt-authentication-ldap-consumer/src/app.module.ts
###   controllers: [AppController],
###   providers: [AppService, ConsumerAppService],

### testAppServiceGetWelcome
// @name testAppServiceGetWelcome

GET  {{uri}}/app/mario HTTP/1.1
Content-Type: {{contentType}}

{
}

### testConsumerAppServiceGetWelcome
// @name testConsumerAppServiceGetWelcome

GET  {{uri}}/consumer/mario HTTP/1.1
Content-Type: {{contentType}}

{
}

### testConsumerAppServiceInjectMetadata
// @name testConsumerAppServiceInjectMetadata

GET  {{uri}}/consumer/inject-metadata/mario HTTP/1.1
Content-Type: {{contentType}}

{
}

### testAuthServiceHashPassword
// @name testAuthServiceHashPassword
// test app.controller access to authService

POST {{uri}}/hash-password HTTP/1.1
Content-Type: {{contentType}}

{
  "password": "12345678"
}

### testLdapServiceGetUserRecord
// @name testLdapServiceGetUserRecord

GET {{uri}}/user/c3 HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### testConfigService
// @name testConfigService
// @section = ldap
@section = jwt

GET {{uri}}/config/{{section}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

# ### testAuthServiceHashPassword
# // @name testAuthServiceHashPassword
# // test app.controller access to authService

# POST {{uri}}/jwt-sign HTTP/1.1
# Content-Type: {{contentType}}

# {
#   "unicodePwd": "12345678"
# }

# // @name ldapGreeting
# ### ldapGreeting WIP to be used to paginate

# @authToken = {{authLogInLdap.response.body.$.accessToken}}
# @skip = 0
# @take = 50
# GET {{uri}}/ldap/{{skip}}/{{take}} HTTP/1.1
# Authorization: Bearer {{authToken}}
